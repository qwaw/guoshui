<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:util="http://www.springframework.org/schema/util" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:task="http://www.springframework.org/schema/task"  
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/util 
		http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task  
    	http://www.springframework.org/schema/task/spring-task.xsd">
	
	<!-- 开启注解扫描 -->
	<context:component-scan base-package="com.zhiyou100"/>
	
	<!-- 加载外部配置文件 -->
	<context:property-placeholder location="classpath:db.properties"/>
	<!-- 设置数据库连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" >
		<property name="driverClass" value="${jdbc.driver}"></property>
		<property name="jdbcUrl" value="${jdbc.url}"></property>
		<property name="user" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	
	<!-- 配置sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定mybatis的核心核心配置文件 -->
		<property name="configLocation" value="classpath:sqlMapConfig.xml"></property>
		<!-- 配置数据源 -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- mapper的映射文件 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml" />
	</bean>
	
	<!-- mapper代理的方式一：配置mapper代理对象 -->
	<!-- <bean id="studentMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		指定需要代理的mapper接口
		<property name="mapperInterface" value="com.zhiyou100.mapper.StudentMapper"></property>
		
		配置sqlSessionFactory
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	</bean> -->
	
	<!-- mapper代理的方式二：扫描包的方式配置代理 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 配置mapper接口 -->
		<property name="basePackage" value="com.zhiyou100.mapper"></property>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>
	
	
	<!-- 配置dao保存在spring容器中  -->
	<!-- <bean id="studentDao" class="com.zhiyou100.dao.impl.StudentDaoImpl">
		配置实现类中的sqlSessionFactory属性
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	</bean> -->
	
	<!-- 事务管理器  
		mybatis使用数据源进行操作数据事务控制 
		而spring操作的是jdbc的事务管理
	-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 设置数据源 -->
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 配置权限管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- 配置对应的realm，即myShiro -->
		<property name="realm" ref="myShiro"></property>
		<!-- 配置一个缓存管理器 -->
		<property name="cacheManager" ref="cacheManager"></property>
	</bean>
	
	<!-- 缓存管理器 -->
	<bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager"></bean>
	<!-- 创建角色判断对象 -->
	<bean id="roleOrOne" class="com.zhiyou100.util.CustomRolesAuthorizationFilter"></bean>
	<!-- 配置shiro的过滤器工厂，id值要对应web.xml中设置的过滤器filter-name一致 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager"></property>
		<!-- 配置登录的请求地址 -->
		<property name="loginUrl" value="/login"></property>
		<!-- 配置登录成功后跳转的地址，如果访问的是非login请求，则跳转的访问的页面 -->
		<property name="successUrl" value="/gzzy"></property>
		<!-- 如果请求的资源，不在你的权限范围之内，直接跳转到403请求地址 -->
		<property name="unauthorizedUrl" value="/403"></property>
		<!-- 指定角色判断 -->
		<property name="filters">  
            <map>    
                 <entry key="roles" value-ref="roleOrOne"/>
            </map>
        </property>
		<!-- 配置权限 -->
		<property name="filterChainDefinitions">
			<value>
			<!-- anon表示此地址不需要任何的访问权限即可访问 -->
				/common/**=anon
				/css/**=anon
				/images/**=anon
				/js/**=anon
				/WEB-INF/**=anon
				/login1=anon
				<!-- 工作主页的角色和权限 -->
				<!-- /gzzy/**=perms[gzzy] -->
				/gzzy/**=roles["1,2,3,4,5,6"]
				/nsfw/**=roles["1,2,3"]
				<!-- 表示进入user路径必须拥有grzx权限的用户 -->
				<!-- /user=perms[hqfw]
				/gzzy/**=perms[gzzy]
				/wdkj/**=perms[wdkj] -->
				<!-- 想要使用/user/delete路径，必须要用户的角色为1 -->
				<!-- /user/delete=roles[1]
				/user/add=roles[2]
				/user/edit/**=roles[1] -->
				<!-- 所有的请求(除去上面的无需访问权限的资源)，都需要通过登录验证，如果未登录则跳转/login -->
				/**=authc
			</value>
		</property>
	</bean>
	
	<!-- 开始事务注解扫描 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<!-- 配置事务增强   相当于环绕通知 -->
	<!-- <tx:advice id="advice" transaction-manager="transactionManager">
		做事务操作
		<tx:attributes>
			绑定事务操作的方法  操作事务的匹配规则
			<tx:method name="add*" propagation="REQUIRED"/>
			<tx:method name="update*" isolation="READ_COMMITTED"/>
			<tx:method name="select*" isolation="READ_COMMITTED"/>
			<tx:method name="insert*" isolation="READ_COMMITTED"/>
			<tx:method name="delete*" read-only="true" isolation="REPEATABLE_READ"/>				
		</tx:attributes>
	
	</tx:advice>
	
	配置切面
	<aop:config>
		设置切入点
		<aop:pointcut expression="execution(* com.zhiyou100.*(..))" id="cut1"/>
		设置切面
		<aop:advisor advice-ref="advice" pointcut-ref="cut1"/>
	</aop:config> -->

	<!-- <bean id="job1" class="com.zhiyou100.util.Job1" /> 

	<bean id="jobDetail1" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">  
    	<property name="targetObject" ref="job1" />  
    	每天凌晨0点1分执行  
    	<property name="targetMethod" value="jobTest1" />  
	</bean>
	
	<bean id="trigger1" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
	    <property name="jobDetail" ref="jobDetail1" />  
	    <property name="cronExpression" value="* * * * * ?" />  
	</bean>
	
	<bean id="scheduler1" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="trigger1"/>
			</list>
		</property>
	</bean> -->
	
	<task:annotation-driven/>
	
</beans>